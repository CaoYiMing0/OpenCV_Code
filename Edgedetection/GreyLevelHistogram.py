'''
计算灰度直方图
图像的构成是有像素点构成的，每个像素点的值代表着该点的颜色（灰度图或者彩色图）。
所谓直方图就是对图像的中的这些像素点的值进行统计，得到一个统一的整体的灰度概念。
直方图的好处就在于可以清晰了解图像的整体灰度分布，这对于后面依据直方图处理图像来说至关重要。

一般情况下直方图都是灰度图像，直方图x轴是灰度值（一般0~255），y轴就是图像中每一个灰度级对应的像素点的个数。

那么如何获得图像的直方图？首先来了解绘制直方图需要的一些量：
灰度级，正常情况下就是0-255共256个灰度级，从最黑一直到最亮（白）（也有可能统计其中的某部分灰度范围），
那么每一个灰度级对应一个数来储存该灰度对应的点数目。也就是说直方图其实就是一个1*m（灰度级）的一个数组而已。
但是有的时候我们不希望一个一个灰度的递增，比如现在我想15个灰度一起作为一个灰度级来花直方图，
这个时候我们可能只需要1*(m/15)这样一个数组就够了。那么这里的15就是直方图的间隔宽度了。

Opencv给我们提供的函数是cv2.calcHist()，该函数有5个参数：

image输入图像，传入时应该用中括号[]括起来

channels:：传入图像的通道，如果是灰度图像，那就不用说了，只有一个通道，值为0，
如果是彩色图像（有3个通道），那么值为0,1,2,中选择一个，对应着BGR各个通道。这个值也得用[]传入。

mask：掩膜图像。如果统计整幅图，那么为none。主要是如果要统计部分图的直方图，就得构造相应的炎掩膜来计算。

histSize：灰度级的个数，需要中括号，比如[256]

ranges:像素值的范围，通常[0,256]，有的图像如果不是0-256，比如说你来回各种变换导致像素值负值、很大，则需要调整后才可以。
除此之外，强大的numpy也有函数用于统计直方图的，通用的一个函数np.histogram,
还有一个函数是np.bincount()（用于以为统计直方图，速度更快）。这三个方式的传入参数基本上差不多，不同的是opencv自带的需要中括号括起来。
对于直方图的显示也是比较简单的，直接plt.plot()就可以。

补充：
    cv2.calcHist(images, channels, mask, histSize, ranges[, hist[, accumulate ]]) #返回hist
    第一个参数必须用方括号括起来。
    第二个参数是用于计算直方图的通道，这里使用灰度图计算直方图，所以就直接使用第一个通道；
    第三个参数是Mask，这里没有使用，所以用None。
    第四个参数是histSize，表示这个直方图分成多少份（即多少个直方柱）。第二个例子将绘出直方图，到时候会清楚一点。
    第五个参数是表示直方图中各个像素的值，[0.0, 256.0]表示直方图能表示像素值从0.0到256的像素。


'''

import cv2
import numpy as np
import matplotlib.pyplot as plt
filename = r'E:\testimage\red.jpg'
img = cv2.imread(filename)
img0 = cv2.imread(filename,0)#直接读为灰度图像
img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

plt.imshow(img_gray, cmap=plt.cm.gray)

hist = cv2.calcHist([img], [0], None, [256], [0, 256])

plt.figure()
plt.title("Grayscale Histogram")
plt.xlabel("Bins")
plt.ylabel("# of Pixels")
plt.plot(hist)
plt.xlim([0, 256])
plt.show()

